{
 "metadata": {
  "name": "",
  "signature": "sha256:a68df9011fd432e1ed62a394bafa20a19b5eb3707205e646a076f9e70c188d02"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "import matplotlib.pylab as plt\n",
      "from scipy.stats import multivariate_normal\n",
      "from sklearn.metrics import confusion_matrix\n",
      "from sklearn.linear_model import LogisticRegression\n",
      "from sklearn.tree import DecisionTreeClassifier\n",
      "from numpy.random import RandomState"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_data = pd.read_csv(\"/home/dyerke/Documents/DSE/DataScienceCompetition_022815/food_analysis_question/cps_food_security.csv\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m_mask= (train_data[\"HRFS12M1\"] >= 2).astype(float)\n",
      "train_data[\"FOOD_INSECURE\"]= m_mask\n",
      "train_data_labels= train_data[\"FOOD_INSECURE\"]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# San Diego Area\n",
      "m_mask= train_data['GTCBSA'] == 41740\n",
      "sd_train_data= train_data[m_mask]\n",
      "sd_train_data_labels= sd_train_data[\"FOOD_INSECURE\"]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def split_train_set(X, X_labels, p):\n",
      "    rows = np.random.binomial(1, p, size=len(X)).astype(bool)\n",
      "    x_train= X[rows].copy().reset_index(drop=True)\n",
      "    x_train_labels= X_labels[rows].copy().reset_index(drop=True)\n",
      "    x_validation= X[~rows].copy().reset_index(drop=True)\n",
      "    x_validation_labels= X_labels[~rows].copy().reset_index(drop=True)\n",
      "    return (x_train, x_train_labels, x_validation, x_validation_labels)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_data, train_data_labels, x_validation, x_validation_labels= split_train_set(train_data, train_data['FOOD_INSECURE'], .7)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Logistic Regression Predictors\n",
      "l_selected_predictors= ['HRHHID', 'HRHHID2', 'PERRP', 'PRTAGE', 'PEMARITL', 'PESEX', 'PRMARSTA', 'OCCURNUM', 'PWSSWGT', 'HEHOUSUT', 'HETENURE', 'HRHTYPE', 'HRNUMHOU', 'HUBUS', 'HUBUSL1', 'HUBUSL2', 'HUBUSL3', 'HUBUSL4', 'HUTYPB', 'PEAFNOW', 'PEEDUCA', 'PRCITFLG', 'PRCITSHP', 'PRFAMNUM', 'PRPERTYP', 'PRTFAGE', 'PUCHINHH', 'PULINENO', 'PEABSPDO', 'PEABSRSN', 'PEDW4WK', 'PEDWAVL', 'PEDWAVR', 'PEDWLKO', 'PEDWLKWK', 'PEDWRSN', 'PEDWWK', 'PEDWWNTO', 'PEHRACT1', 'PEHRACT2', 'PEHRACTT', 'PEHRAVL', 'PEHRFTPT', 'PEHRRSN1', 'PEHRRSN2', 'PEHRRSN3', 'PEHRUSL1', 'PEHRUSL2', 'PEHRUSLT', 'PEHRWANT', 'PEJHRSN', 'PEJHWANT', 'PEJHWKO', 'PELAYAVL', 'PELAYDUR', 'PELAYFTO', 'PELAYLK', 'PELKAVL', 'PELKDUR', 'PELKFTO', 'PELKLL1O', 'PELKLL2O', 'PELKLWO', 'PELKM1', 'PEMJNUM', 'PEMJOT', 'PEMLR', 'PENLFACT', 'PENLFJH', 'PENLFRET', 'PERET1', 'PRABSREA', 'PRCIVLF', 'PRDISC', 'PREMPHRS', 'PREMPNOT', 'PRERELG', 'PREXPLF', 'PRFTLF', 'PRHRUSL', 'PRJOBSEA', 'PRPTHRS', 'PRPTREA', 'PRUNEDUR', 'PRUNTYPE', 'PRWKSCH', 'PRWKSTAT', 'PRWNTJOB', 'PUABSOT', 'PUBUS1', 'PUBUS2OT', 'PUBUSCK1', 'PUBUSCK2', 'PUBUSCK3', 'PUBUSCK4', 'PUDIS', 'PUDIS1', 'PUDIS2', 'PUDWCK1', 'PUDWCK2', 'PUDWCK3', 'PUDWCK4', 'PUDWCK5', 'PUHRCK1', 'PUHRCK12', 'PUHRCK2', 'PUHRCK3', 'PUHRCK4', 'PUHRCK5', 'PUHRCK6', 'PUHRCK7', 'PUHROFF1', 'PUHROFF2', 'PUHROT1', 'PUHROT2', 'PUJHCK1', 'PUJHCK2', 'PUJHCK3', 'PUJHCK4', 'PUJHCK5', 'PUJHDP1O', 'PULAY', 'PULAY6M', 'PULAYAVR', 'PULAYCK1', 'PULAYCK2', 'PULAYCK3', 'PULAYDT', 'PULK', 'PULKAVR', 'PULKDK1', 'PULKDK2', 'PULKDK3', 'PULKM2', 'PULKM3', 'PULKM4', 'PULKM5', 'PULKM6', 'PULKPS1', 'PULKPS2', 'PULKPS3', 'PULKPS4', 'PULKPS5', 'PULKPS6', 'PUNLFCK1', 'PUNLFCK2', 'PURETOT', 'PUSLFPRX', 'PUWK', 'PEIO1COW', 'PEIO2COW', 'PUIO1MFG', 'PUIO2MFG', 'PUIOCK1', 'PUIOCK2', 'PUIOCK3', 'PUIODP1', 'PUIODP2', 'PUIODP3', 'PTERN', 'PEERNCOV', 'PTERNH1O', 'PTERNH2', 'PEERNHRO', 'PEERNHRY', 'PEERNLAB', 'PEERNPER', 'PEERNRT', 'PEERNUOT', 'PEERNWKP', 'PTERNHLY', 'PTERNWA', 'PRHERNAL', 'PRWERNAL', 'PTHR', 'PTOT', 'PTWK', 'PTERN2', 'PTERNH1C', 'PESCHENR', 'PESCHFT', 'PESCHLVL', 'PRNLFSCH', 'GEREG', 'GESTCEN', 'HWHHWGT', 'PWFMWGT', 'PWLGWGT', 'PWORWGT', 'PWVETWGT', 'PEDIPGED', 'PEHGCOMP', 'PECYC', 'PEGRPROF', 'PEGR6COR', 'PEMS123', 'PWCMPWGT', 'PRCHLD', 'PRNMCHLD', 'PEHSPNON', 'PRMJIND1', 'PRMJIND2', 'PRMJOCC1', 'PRMJOCC2', 'PRCOW1', 'PRCOW2', 'PRDTCOW1', 'PRDTCOW2']\n",
      "\n",
      "# Naive Gaussian Predictors\n",
      "S= \"\"\"\n",
      "('PREDUCA5', 0.8817116658) found in 610432ms\n",
      "('PREDUCA4', 0.8817116658) found in 614451ms\n",
      "('PRMLR', 0.8817116658) found in 947195ms\n",
      "('GTCO', 0.8817116658) found in 1088358ms\n",
      "('GESTFIPS', 0.8817116658) found in 1095586ms\n",
      "('HRPOOR', 0.8817116658) found in 1097785ms\n",
      "('HRSUPINT', 0.8817116658) found in 937898ms\n",
      "('HESCM4', 0.8817116658) found in 1007574ms\n",
      "('HESCF4', 0.8817116658) found in 801578ms\n",
      "('HESC4', 0.8817116658) found in 800661ms\n",
      "('HESC3A', 0.8817116658) found in 796744ms\n",
      "('HESCM3', 0.8817116658) found in 1016996ms\n",
      "('HESCF3', 0.8817116658) found in 1088899ms\n",
      "('HESC3', 0.8817116658) found in 882878ms\n",
      "('HESC2', 0.8817116658) found in 799848ms\n",
      "('HESC1', 0.8817116658) found in 801102ms\n",
      "('HETSP9', 0.8817116658) found in 804743ms\n",
      "('HETSP3O', 0.8817116658) found in 805579ms\n",
      "('HETSP2D', 0.8817116658) found in 806026ms\n",
      "('HES9', 0.8817116658) found in 611875ms\n",
      "('HETS8DO', 0.8817116658) found in 605857ms\n",
      "('HETS8CO', 0.8817116658) found in 605436ms\n",
      "('HES8B', 0.8817116658) found in 610054ms\n",
      "('HETS8OU', 0.8817116658) found in 603543ms\n",
      "('HETS8O', 0.8817116658) found in 612023ms\n",
      "('HETS7O', 0.8817116658) found in 616787ms\n",
      "('HETS6O', 0.8817116658) found in 612738ms\n",
      "('HETS5O', 0.8817116658) found in 608285ms\n",
      "('HETS4O', 0.8817116658) found in 612167ms\n",
      "('HETS3O', 0.8817116658) found in 611381ms\n",
      "('HETS2O', 0.8817116658) found in 608572ms\n",
      "('HES1D', 0.8817116658) found in 605626ms\n",
      "('HES1C', 0.8817116658) found in 608454ms\n",
      "('HES1B', 0.8817116658) found in 610883ms\n",
      "('HES1A', 0.8817116658) found in 608311ms\n",
      "('PWSUPWGT', 0.8817116658) found in 607102ms\n",
      "('HHSUPWGT', 0.8817116658) found in 579687ms\n",
      "('PRINUYER', 0.8817116658) found in 582515ms\n",
      "('HWHHWTLN', 0.8817116658) found in 585119ms\n",
      "('PRDASIAN', 0.8817116658) found in 580241ms\n",
      "('PTIO2OCD', 0.8817116658) found in 579666ms\n",
      "('PTIO1OCD', 0.8817116658) found in 580750ms\n",
      "('PEMNTVTY', 0.8817116658) found in 582029ms\n",
      "('PEFNTVTY', 0.8817116658) found in 581370ms\n",
      "('PENATVTY', 0.8817116658) found in 589433ms\n",
      "('PEIO2ICD', 0.8817116658) found in 586661ms\n",
      "('PEIO1ICD', 0.8817116658) found in 586608ms\n",
      "('PTDTRACE', 0.8817116658) found in 583608ms\n",
      "('HEFAMINC', 0.8817116658) found in 582993ms\n",
      "('HUTYPEA', 0.8817116658) found in 586910ms\n",
      "('PRDISFLG', 0.8817116658) found in 590962ms\n",
      "('PEDISOUT', 0.8817116658) found in 571750ms\n",
      "('PEDISDRS', 0.8817116658) found in 571285ms\n",
      "('PEDISPHY', 0.8817116658) found in 577893ms\n",
      "('PEDISREM', 0.8817116658) found in 578547ms\n",
      "('PEDISEYE', 0.8817116658) found in 568255ms\n",
      "('PEDISEAR', 0.8817116658) found in 569481ms\n",
      "('PECOHAB', 0.8817116658) found in 569532ms\n",
      "('PEMOMTYP', 0.8817116658) found in 573964ms\n",
      "('PELNDAD', 0.8817116658) found in 566310ms\n",
      "('PELNMOM', 0.8817116658) found in 568335ms\n",
      "('PEDADTYP', 0.8817116658) found in 572331ms\n",
      "('PEAFWHN4', 0.8817116658) found in 570432ms\n",
      "('PEAFWHN3', 0.8817116658) found in 567737ms\n",
      "('PEAFWHN2', 0.8817116658) found in 570764ms\n",
      "('PEAFWHN1', 0.8817116658) found in 572395ms\n",
      "('PEAFEVER', 0.8817116658) found in 575131ms\n",
      "('HUFINAL', 0.8817116658) found in 573321ms\n",
      "('PRDTHSP', 0.8817116658) found in 572612ms\n",
      "('GTCBSASZ', 0.8817116658) found in 572903ms\n",
      "('GTINDVPC', 0.8817116658) found in 574874ms\n",
      "('GTMETSTA', 0.8817116658) found in 591839ms\n",
      "\"\"\"\n",
      "ng_selected_predictors= []\n",
      "ng_selected_predictors.extend(l_selected_predictors)\n",
      "sArr= S.split('\\n')\n",
      "for i in sArr:\n",
      "    i= i.split(',')[0]\n",
      "    for char in \"'(-.,\":\n",
      "        i= i.replace(char, '')\n",
      "    if len(i) > 0:\n",
      "        ng_selected_predictors.append(i)\n",
      "ng_selected_predictors= list(set(ng_selected_predictors))\n",
      "\n",
      "# Decision Tree Predictors\n",
      "final_selected_predictors= ['HRHHID', 'HRHHID2', 'PERRP', 'PRTAGE', 'PEMARITL', 'PESEX', 'PRMARSTA', 'OCCURNUM', 'HESC3', 'HETS8CO', 'HES9', 'HETSP3O', 'HETS8O', 'GTCBSA', 'PEHSPNON', 'HETS6O', 'HETS8OU', 'HWHHWTLN', 'GESTCEN', 'HESC2', 'PUBUS1', 'HETS3O', 'HETS2O', 'HES1C', 'PULKPS2', 'HHSUPWGT', 'HES8B', 'PTERN', 'HES1B', 'PENLFJH', 'PUDIS2', 'PEAFWHN1', 'PULKAVR', 'PEDISOUT', 'PUBUS2OT', 'PUDWCK2', 'PELAYAVL', 'PRCITFLG', 'PULKM5', 'PULINENO', 'PULKPS4', 'PELKFTO', 'PUIO2MFG', 'PEERNHRY', 'PUJHDP1O', 'PULKDK2', 'PEHRAVL', 'PULAYCK1', 'PEDWWK', 'PUSLFPRX', 'PEMS123', 'GEREG', 'HESC1', 'PUJHCK2', 'HES1A', 'PEDW4WK', 'PEDWAVL', 'GTCO', 'PULKPS3', 'PEDWLKWK', 'PEDWWNTO', 'PUJHCK1', 'PULKPS1', 'PURETOT', 'PULK', 'PEDWAVR', 'PEERNUOT', 'PEJHWANT']\n",
      "final_selected_predictors.extend(ng_selected_predictors)\n",
      "final_selected_predictors= list(set(final_selected_predictors))\n",
      "\n",
      "print final_selected_predictors"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['PWSSWGT', 'HEHOUSUT', 'PEERNHRO', 'PUDWCK4', 'PRFAMNUM', 'PUIO2MFG', 'PEERNHRY', 'PEAFNOW', 'PRDASIAN', 'PWORWGT', 'PUBUS1', 'PUHROT2', 'PRDISC', 'PTERNH2', 'HESC3', 'PELKFTO', 'PEERNCOV', 'PEDISOUT', 'HESC4', 'PEERNRT', 'PEFNTVTY', 'PUIODP1', 'PUIODP2', 'PUIODP3', 'PRMLR', 'PUJHCK4', 'PULAY6M', 'PULAYCK1', 'PEMLR', 'PULAYCK3', 'PULAYCK2', 'PRINUYER', 'PULKDK3', 'HUBUSL4', 'HUBUSL2', 'PEHRAVL', 'PRHRUSL', 'PEHRFTPT', 'PEMS123', 'HUBUS', 'PEABSRSN', 'PTERNH1C', 'PEMOMTYP', 'PTERNH1O', 'PEHRWANT', 'PRCITSHP', 'PRCIVLF', 'PELKLL1O', 'PEDWLKO', 'PELKM1', 'PELAYLK', 'PREMPHRS', 'PELAYDUR', 'PEJHRSN', 'PRDTCOW1', 'PEDISEAR', 'PULAYDT', 'PRDTCOW2', 'HES1B', 'HES1C', 'HES1A', 'HESCF3', 'PTWK', 'HES1D', 'PRPTREA', 'PEIO1ICD', 'PRTFAGE', 'PULKDK1', 'PTDTRACE', 'HRHTYPE', 'HETS8O', 'PRNMCHLD', 'GESTFIPS', 'PUHRCK4', 'PUHRCK5', 'PUHRCK6', 'PUHRCK7', 'PUHRCK1', 'PUHRCK2', 'PUHRCK3', 'PUHROT1', 'PEHRACT1', 'PEHRUSL2', 'PEHRUSL1', 'HEFAMINC', 'HETS4O', 'HWHHWGT', 'PEMJOT', 'PRPTHRS', 'PELAYFTO', 'PULK', 'PESCHLVL', 'PEERNPER', 'PULKM5', 'PEIO2COW', 'PEDWLKWK', 'PRMJOCC1', 'PRMJOCC2', 'HESCF4', 'PEDWRSN', 'HUFINAL', 'PERET1', 'PTHR', 'PEIO1COW', 'HETS3O', 'PULKM2', 'HRSUPINT', 'GESTCEN', 'PRABSREA', 'PEERNUOT', 'PURETOT', 'PEABSPDO', 'PULAYAVR', 'PUHRCK12', 'PECOHAB', 'GTMETSTA', 'PELNMOM', 'HETSP2D', 'PUBUSCK4', 'PUWK', 'PRUNEDUR', 'HES9', 'PEHRUSLT', 'PEDIPGED', 'PEHRACTT', 'PRMARSTA', 'PUBUSCK1', 'HETS2O', 'PENLFRET', 'PUHROFF2', 'PEDWWK', 'HETS8CO', 'PUIO1MFG', 'PUBUSCK3', 'PUBUSCK2', 'PRDISFLG', 'PRMJIND2', 'PUJHCK5', 'PRMJIND1', 'PUJHCK1', 'PUJHCK2', 'PUJHCK3', 'PWSUPWGT', 'HRNUMHOU', 'PRWKSTAT', 'PRWNTJOB', 'PELKLL2O', 'PEDISDRS', 'PEJHWKO', 'PECYC', 'PEDADTYP', 'PULKM4', 'PEHRRSN1', 'PTERN', 'PUIOCK3', 'PUIOCK1', 'HUTYPB', 'PEHRRSN2', 'PEERNWKP', 'HETENURE', 'PEHRRSN3', 'PRJOBSEA', 'PEJHWANT', 'PESEX', 'PRFTLF', 'PEDWWNTO', 'PEGRPROF', 'PRTAGE', 'HESCM3', 'HWHHWTLN', 'PRDTHSP', 'PREXPLF', 'HETS5O', 'PESCHENR', 'PUDIS2', 'PUDIS1', 'HESC1', 'HESC2', 'PEAFWHN4', 'PEAFWHN3', 'PEAFWHN2', 'PEAFWHN1', 'PEERNLAB', 'PEEDUCA', 'PEDISREM', 'PENLFACT', 'PEHRACT2', 'GTCBSASZ', 'PUDWCK5', 'GEREG', 'PUDWCK3', 'PUDWCK2', 'PEDISPHY', 'HETS7O', 'PRERELG', 'PULKM6', 'PULKDK2', 'HETSP3O', 'PULKM3', 'HHSUPWGT', 'PWVETWGT', 'PWLGWGT', 'GTCBSA', 'PUCHINHH', 'PREMPNOT', 'PRNLFSCH', 'PENATVTY', 'PEHGCOMP', 'PESCHFT', 'PTERN2', 'PUSLFPRX', 'PEDWAVL', 'PWCMPWGT', 'PERRP', 'GTCO', 'PEIO2ICD', 'PUDIS', 'PUIOCK2', 'PRCOW2', 'PRCOW1', 'HUTYPEA', 'PEDWAVR', 'PUABSOT', 'HES8B', 'GTINDVPC', 'HUBUSL3', 'PULKPS4', 'PULKPS5', 'PEDISEYE', 'PEDW4WK', 'PELAYAVL', 'PULKPS1', 'PULKPS2', 'PULKPS3', 'PEMNTVTY', 'PRCHLD', 'HUBUSL1', 'PULINENO', 'PRUNTYPE', 'PRWKSCH', 'PELKAVL', 'PEHSPNON', 'PRWERNAL', 'HRHHID2', 'HRPOOR', 'PULKAVR', 'PWFMWGT', 'HRHHID', 'PUHROFF1', 'PTERNHLY', 'PRHERNAL', 'PULKPS6', 'PUDWCK1', 'PELKLWO', 'PTIO2OCD', 'PENLFJH', 'PUBUS2OT', 'HETS8OU', 'PEGR6COR', 'PTOT', 'PULAY', 'HESC3A', 'PTERNWA', 'HETSP9', 'HETS6O', 'PEAFEVER', 'PELNDAD', 'PREDUCA4', 'PREDUCA5', 'PTIO1OCD', 'HESCM4', 'PUJHDP1O', 'OCCURNUM', 'PEMARITL', 'PRPERTYP', 'HETS8DO', 'PEMJNUM', 'PELKDUR', 'PUNLFCK2', 'PUNLFCK1', 'PRCITFLG']\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "class Model:\n",
      "    def __init__(self, train_x, train_x_labels, fields= None):\n",
      "        self._mFields= fields\n",
      "        self._mModel= self._init_model(train_x, train_x_labels, fields)\n",
      "    \n",
      "    def _init_model(self, train_x, train_x_labels, fields):\n",
      "        raise NotImplementedError\n",
      "    \n",
      "    def evaluate(self, test_y, test_y_labels):\n",
      "        return self._do_evaluate(self._mModel, test_y, test_y_labels, self._mFields)\n",
      "    \n",
      "    def predict(self, test_y):\n",
      "        return self._do_predict(self._mModel, test_y, self._mFields)\n",
      "    \n",
      "    def _do_evaluate(self, model, test_y, test_y_labels, fields):\n",
      "        raise NotImplementedError\n",
      "    \n",
      "    def _do_predict(self, model, test_y, fields):\n",
      "        raise NotImplementedError"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "class LogisticRegressionModel(Model):\n",
      "    def __init__(self, train_x, train_x_labels, fields= None):\n",
      "        Model.__init__(self, train_x, train_x_labels, fields)\n",
      "    \n",
      "    def _init_model(self, train_x, train_x_labels, fields):\n",
      "        rng = RandomState(45)\n",
      "        m_model= LogisticRegression(random_state=rng)\n",
      "        if fields is None:\n",
      "            m_model.fit(train_x, train_x_labels)\n",
      "        else:\n",
      "            m_model.fit(train_x[fields], train_x_labels)\n",
      "        return m_model\n",
      "    \n",
      "    def _do_evaluate(self, model, test_y, test_y_labels, fields):\n",
      "        return model.score(test_y[fields],test_y_labels) if fields else model.score(test_y, test_y_labels)\n",
      "    \n",
      "    def _do_predict(self, model, test_y, fields):\n",
      "        return model.predict(test_y[fields]) if fields else model.predict(test_y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def new_logistic_regression_model(train_x, train_x_labels, feature_names):\n",
      "    return LogisticRegressionModel(train_x, train_x_labels, feature_names)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m_model= new_logistic_regression_model(train_data, train_data_labels, l_selected_predictors)\n",
      "m_prediction= m_model.predict(sd_train_data)\n",
      "actual_labels_arr= sd_train_data_labels.values"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m_cm = confusion_matrix(m_prediction, actual_labels_arr)\n",
      "\n",
      "%matplotlib inline\n",
      "\n",
      "fig, ax= subplots(figsize=(3, 3))\n",
      "img= ax.imshow(m_cm, interpolation='nearest')\n",
      "ax.set_title('Confusion matrix')\n",
      "ax.set_ylabel('True label')\n",
      "ax.set_xlabel('Predicted label')\n",
      "fig.colorbar(img, ax=ax)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "<matplotlib.colorbar.Colorbar instance at 0x7f62da3b1e18>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f62efb56590>"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "class DecisionTreeModel(Model):\n",
      "    def __init__(self, train_x, train_x_labels, fields= None):\n",
      "        Model.__init__(self, train_x, train_x_labels, fields)\n",
      "    \n",
      "    def _init_model(self, train_x, train_x_labels, fields):\n",
      "        rng = RandomState(45)\n",
      "        m_model= DecisionTreeClassifier(random_state=rng)\n",
      "        if fields is None:\n",
      "            m_model.fit(train_x, train_x_labels)\n",
      "        else:\n",
      "            m_model.fit(train_x[fields], train_x_labels)\n",
      "        return m_model\n",
      "    \n",
      "    def _do_evaluate(self, model, test_y, test_y_labels, fields):\n",
      "        return model.score(test_y[fields],test_y_labels) if fields else model.score(test_y, test_y_labels)\n",
      "\n",
      "    def _do_predict(self, model, test_y, fields):\n",
      "        return model.predict(test_y[fields]) if fields else model.predict(test_y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def new_decision_tree_model(train_x, train_x_labels, feature_names):\n",
      "    return DecisionTreeModel(train_x, train_x_labels, feature_names)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m_model= new_decision_tree_model(train_data, train_data_labels, final_selected_predictors)\n",
      "m_prediction= m_model.predict(sd_train_data)\n",
      "actual_labels_arr= sd_train_data_labels.values"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m_cm = confusion_matrix(m_prediction, actual_labels_arr)\n",
      "\n",
      "%matplotlib inline\n",
      "\n",
      "fig, ax= subplots(figsize=(3, 3))\n",
      "img= ax.imshow(m_cm, interpolation='nearest')\n",
      "ax.set_title('Confusion matrix')\n",
      "ax.set_ylabel('True label')\n",
      "ax.set_xlabel('Predicted label')\n",
      "fig.colorbar(img, ax=ax)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "<matplotlib.colorbar.Colorbar instance at 0x7f62da0da5a8>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f62da427710>"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "class PFoodClass:\n",
      "     \n",
      "    sig_digits = 10 \n",
      "\n",
      "    def __init__(self, cid):\n",
      "        self._mId = cid\n",
      "        self._mRows = []\n",
      "        self._mMean = None\n",
      "        self._mCov = None\n",
      "        self._mMvn = None\n",
      "        self._mPi = 0.0\n",
      "    \n",
      "    def __str__(self):\n",
      "        cov = self._mCov if self._mCov is not None else []\n",
      "        mean = self._mMean if self._mMean is not None else []\n",
      "        return \"id={}, mvn= {}, cov.shape={}, mean.shape= {}, pi={}\".format(self._mId, self._mMvn, shape(cov), shape(mean), self._mPi)\n",
      "    \n",
      "    def copy(self):\n",
      "        m_new = PFoodClass(self._mId)\n",
      "        m_new._mRows = self._mRows\n",
      "        m_new._mPi = self._mPi\n",
      "        m_new._mMean = np.mean(m_new._mRows, axis=0)\n",
      "        return m_new\n",
      "        \n",
      "    def add_train(self, l_row):\n",
      "        self._mRows.append(l_row)\n",
      "    \n",
      "    def on_train_complete(self, f_total_rows):\n",
      "        self._mPi = round(float(len(self._mRows)) / f_total_rows, PFoodClass.sig_digits) \n",
      "        self._mMean = np.mean(self._mRows, axis=0)\n",
      "        \n",
      "    def initialize_multivariate_normal(self, k_constant=None):\n",
      "        self._mCov = np.cov(self._mRows, rowvar=0)\n",
      "        if k_constant is not None:\n",
      "            t_shape= shape(self._mMean)\n",
      "            n_col = t_shape[0]\n",
      "            l_ma_identity = np.identity(n_col)\n",
      "            l_ma_identity *= k_constant\n",
      "            self._mCov += l_ma_identity\n",
      "        self._mMvn = multivariate_normal(mean=self._mMean, cov=self._mCov)\n",
      "        \n",
      "    def test(self, l_row):\n",
      "        m_mvn= self._mMvn\n",
      "        m_sum = round(m_mvn.logpdf(l_row), PFoodClass.sig_digits)\n",
      "        m_sum += math.log(self._mPi)\n",
      "        return m_sum\n",
      "\n",
      "class PFoodClassTest:\n",
      "    \n",
      "    def __init__(self, l_id, l_row, master_classes):\n",
      "        self._mId = l_id\n",
      "        self._mRow = l_row\n",
      "        self._mMasterClasses = master_classes\n",
      "        self._mMappedLabel = -1\n",
      "        self._mActualLabel = -1\n",
      "        self._mHit = False\n",
      "    \n",
      "    def __str__(self):\n",
      "        return \"hit={}, mappedLabel= {}, actualLabel={}\".format(self._mHit, self._mMappedLabel, self._mActualLabel)\n",
      "    \n",
      "    def execute_test(self, actual_label_map):\n",
      "        max_p = None\n",
      "        max_ic = None\n",
      "        for ic in self._mMasterClasses.itervalues():\n",
      "            ic_sum = ic.test(self._mRow)\n",
      "            if max_p is None or ic_sum > max_p:\n",
      "                max_p = ic_sum\n",
      "                max_ic = ic\n",
      "        self._mActualLabel = actual_label_map[self._mId]\n",
      "        self._mMappedLabel = max_ic._mId\n",
      "        self._mHit = self._mMappedLabel == self._mActualLabel\n",
      "        \n",
      "    def get_results(self):\n",
      "        return (self._mHit, self._mMappedLabel, self._mActualLabel)\n",
      "\n",
      "class PFoodClassDetectionEngine:\n",
      "    \n",
      "    def __init__(self, lrows, test_labels, master_classes, k_constant=2002.1):\n",
      "        self._mRows = lrows\n",
      "        #\n",
      "        self._mActualLabelMap = {}\n",
      "        for i in xrange(len(test_labels)):\n",
      "            self._mActualLabelMap[i] = test_labels[i]\n",
      "        #\n",
      "        self._mKConstant = k_constant\n",
      "        self._mMasterClasses = {}\n",
      "        for k, v in master_classes.iteritems():\n",
      "            ic = v.copy()\n",
      "            ic.initialize_multivariate_normal(self._mKConstant)\n",
      "            self._mMasterClasses[k] = ic            \n",
      "        self._mHitRate = 0.0\n",
      "        self._mErrorRate = 0.0\n",
      "        self._mHitList= []\n",
      "        self._mMissList= []\n",
      "    \n",
      "    def run(self):\n",
      "        self._mClass_tests = []\n",
      "        l_hit_count = 0\n",
      "        for i in xrange(len(self._mRows)):\n",
      "            ict = PFoodClassTest(i, self._mRows[i], self._mMasterClasses)\n",
      "            ict.execute_test(self._mActualLabelMap)\n",
      "            m_is_hit = ict.get_results()[0]\n",
      "            if m_is_hit:\n",
      "                l_hit_count += 1\n",
      "                self._mHitList.append(ict)\n",
      "            else:\n",
      "                self._mMissList.append(ict)\n",
      "            self._mClass_tests.append(ict)\n",
      "        f_hit_rate = round(float(l_hit_count) / float(len(self._mClass_tests)), PFoodClass.sig_digits)\n",
      "        self._mHitRate= f_hit_rate\n",
      "        self._mErrorRate= round(1 - f_hit_rate, PFoodClass.sig_digits)\n",
      "    \n",
      "    def get_results(self):\n",
      "        return (self._mHitRate, self._mErrorRate)\n",
      "    \n",
      "class NaiveBayesGausianModel(Model):\n",
      "    def __init__(self, train_x, train_x_labels, fields= None):\n",
      "        Model.__init__(self, train_x, train_x_labels, fields)\n",
      "    \n",
      "    def _init_model(self, train_x, train_x_labels, fields):\n",
      "        self.master_classes = {}\n",
      "        \n",
      "        if fields is None:\n",
      "            working_train_x= train_x\n",
      "        else:\n",
      "            working_train_x= train_x[fields]\n",
      "        working_train_x_arr= working_train_x.values\n",
      "        working_train_x_labels= train_x_labels.values\n",
      "        n= shape(working_train_x_arr)[0]\n",
      "        for i in xrange(n):\n",
      "            x_label= working_train_x_labels[i]\n",
      "            x_row= working_train_x_arr[i]\n",
      "            current_class = None\n",
      "            if x_label not in self.master_classes:\n",
      "                current_class = PFoodClass(x_label)\n",
      "                self.master_classes[x_label] = current_class\n",
      "            else:\n",
      "                current_class = self.master_classes[x_label]\n",
      "            current_class.add_train(x_row);\n",
      "            \n",
      "        f_total_rows = float(n)\n",
      "        for m_class in self.master_classes.itervalues():\n",
      "            m_class.on_train_complete(f_total_rows)\n",
      "    \n",
      "    def _do_evaluate(self, model, test_y, test_y_labels, fields):\n",
      "        if fields is None:\n",
      "            working_test_y= test_y\n",
      "        else:\n",
      "            working_test_y= test_y[fields]\n",
      "        working_test_y_arr= working_test_y.values\n",
      "        working_test_y_labels= test_y_labels.values\n",
      "        m_engine= PFoodClassDetectionEngine(working_test_y_arr, working_test_y_labels, self.master_classes)\n",
      "        m_engine.run()\n",
      "        m_results= m_engine.get_results()\n",
      "        return m_results[0]\n",
      "\n",
      "    def _do_predict(self, model, test_y, test_y_labels, fields):\n",
      "        if fields is None:\n",
      "            working_test_y= test_y\n",
      "        else:\n",
      "            working_test_y= test_y[fields]\n",
      "        working_test_y_arr= working_test_y.values\n",
      "        working_test_y_labels= test_y_labels.values\n",
      "        m_engine= PFoodClassDetectionEngine(working_test_y_arr, working_test_y_labels, self.master_classes)\n",
      "        m_engine.run()\n",
      "        class_tests= m_engine._mClass_tests\n",
      "        m_result= []\n",
      "        for ct in class_tests:\n",
      "            m_result.append(ct._mMappedLabel)\n",
      "        return m_result"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def new_naive_bayes_gaussian_model(train_x, train_x_labels, feature_names):\n",
      "    return NaiveBayesGausianModel(train_x, train_x_labels, feature_names)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m_model= new_naive_bayes_gaussian_model(train_data, train_data_labels, final_selected_predictors)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "actual_labels_arr= sd_train_data_labels\n",
      "m_prediction= m_model._do_predict(None, sd_train_data, actual_labels_arr, final_selected_predictors)\n",
      "\n",
      "m_cm = confusion_matrix(m_prediction, actual_labels_arr)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "\n",
      "fig, ax= subplots(figsize=(3, 3))\n",
      "img= ax.imshow(m_cm, interpolation='nearest')\n",
      "ax.set_title('Confusion matrix')\n",
      "ax.set_ylabel('True label')\n",
      "ax.set_xlabel('Predicted label')\n",
      "fig.colorbar(img, ax=ax)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<matplotlib.colorbar.Colorbar instance at 0x7f62d984ef80>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f62da17dad0>"
       ]
      }
     ],
     "prompt_number": 21
    }
   ],
   "metadata": {}
  }
 ]
}